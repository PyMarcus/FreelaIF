// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/repositories/customer_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/PyMarcus/FreelaIF/auth-api/auth-api/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockICustomerRepository is a mock of ICustomerRepository interface.
type MockICustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICustomerRepositoryMockRecorder
}

// MockICustomerRepositoryMockRecorder is the mock recorder for MockICustomerRepository.
type MockICustomerRepositoryMockRecorder struct {
	mock *MockICustomerRepository
}

// NewMockICustomerRepository creates a new mock instance.
func NewMockICustomerRepository(ctrl *gomock.Controller) *MockICustomerRepository {
	mock := &MockICustomerRepository{ctrl: ctrl}
	mock.recorder = &MockICustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICustomerRepository) EXPECT() *MockICustomerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICustomerRepository) Create(customer *domain.CustomerEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICustomerRepositoryMockRecorder) Create(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICustomerRepository)(nil).Create), customer)
}

// GetCustomerByEmail mocks base method.
func (m *MockICustomerRepository) GetCustomerByEmail(email string) (*domain.CustomerEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByEmail", email)
	ret0, _ := ret[0].(*domain.CustomerEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByEmail indicates an expected call of GetCustomerByEmail.
func (mr *MockICustomerRepositoryMockRecorder) GetCustomerByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByEmail", reflect.TypeOf((*MockICustomerRepository)(nil).GetCustomerByEmail), email)
}

// GetCustomerByUserName mocks base method.
func (m *MockICustomerRepository) GetCustomerByUserName(username string) (*domain.CustomerEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByUserName", username)
	ret0, _ := ret[0].(*domain.CustomerEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByUserName indicates an expected call of GetCustomerByUserName.
func (mr *MockICustomerRepositoryMockRecorder) GetCustomerByUserName(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByUserName", reflect.TypeOf((*MockICustomerRepository)(nil).GetCustomerByUserName), username)
}

// ListAll mocks base method.
func (m *MockICustomerRepository) ListAll() ([]*domain.CustomerEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll")
	ret0, _ := ret[0].([]*domain.CustomerEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockICustomerRepositoryMockRecorder) ListAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockICustomerRepository)(nil).ListAll))
}
